
// Now run the algorithm ...
func process(id string, slice []int, sortedList chan int, semaphore chan bool) {

	// fmt.Printf("hi from process id [%s], slice: [%+v]\n", id, slice)

	// sa := getAlgorithm(id)
	// sa.AlgorithmRun(slice)

	// for i := 0; i < len(slice); i++ {
	// 	sortedList <- slice[i]
	// }

	// // this worker is done.
	// semaphore <- true
}

/*run ...
 *
 *
 *
 */
func run() {
	// numbers := make(chan int, *size)
	// done := make(chan bool, len(algorithms))

	// fmt.Println("len of algorithms:", len(algorithms))
	// for k := range algorithms {
	// 	go process(k, PreSortSlice, numbers, done)
	// }
	// for i := 0; i < len(algorithms); i++ {
	// 	<-done
	// }
}

/*main ...
 *
 *
 *
 */

// //SortResult ...
// type SortResult struct {
// 	PreSort  []int
// 	PostSort []int
// }
// "sinking":   false,
// "insertion": false,
// "selection": false,
// "quick":     false,
// "shell":     false,
// "heap":      false,
// "bucket":    false,
// "radix":     false,
